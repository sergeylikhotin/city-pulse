import { Goto, Label, On, Scene, Step, Wait } from '@grammy/decorators';
import { SceneContext } from '@grammy/grammy.context';
import { MessageX } from '@grammyjs/hydrate/out/data/message';
import { GrammyUserError } from '@grammy/grammy.user-error';

import { PlayerBankingEntity } from '../../domain/entity/player-banking.entity';

import { format } from '../utils/transaction';
import { PlayerBankWithdrawalScene } from './player-bank-withdrawal.scene';
import { PlayerBankDepositScene } from './player-bank-deposit.scene';

@Scene()
export class PlayerBankScene {
  constructor(private readonly playerBankingEntity: PlayerBankingEntity) {}

  @Label('BANK')
  @Step()
  async onBankEnter(ctx: SceneContext) {
    if (ctx.player == null) {
      throw new GrammyUserError('–£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    }

    ctx.scene.session = {};

    await ctx.reply('üè¶ –í–∞—à –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç:');
  }

  @Label('BALANCE')
  @Step()
  async onBalance(ctx: SceneContext) {
    const loaded = ctx.replyLoading();
    const account = await this.playerBankingEntity.getBankAccountByPlayerId(
      ctx.player.id,
    );
    if (account == null) {
      await loaded();

      throw new GrammyUserError(
        '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç –¥–ª—è –≤–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!',
      );
    }

    const transactions =
      await this.playerBankingEntity.getBankAccountTransactions(account.id);
    await loaded();

    await ctx.reply(`üí∞ –ë–∞–ª–∞–Ω—Å: ${account.balance}`);
    await ctx.reply(
      `üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π: \r\n${
        transactions
          .slice(0, 10)
          .map((transaction, i) => `${i + 1}. ${format(transaction)}`)
          .join('\r\n') || '–û–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'
      }`,
    );
  }

  @Label('MENU')
  @Step()
  async onMenu(ctx: SceneContext<{ menuMsg: MessageX }>) {
    ctx.scene.session.menuMsg = await ctx.replyMenu(
      '<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>',
      [
        // [{ text: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏', callback_data: 'history' }],
        [
          { text: '–í–Ω–µ—Å—Ç–∏ –Ω–∞ —Å—á—ë—Ç', callback_data: 'withdrawal' },
          { text: '–°–Ω—è—Ç—å —Å–æ —Å—á–µ—Ç–∞', callback_data: 'deposit' },
        ],
        [{ text: '–ü–µ—Ä–µ–≤–æ–¥', callback_data: 'transfer' }],
        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'exit' }],
      ],
    );
  }

  @Wait('MENU_RESPONSE')
  @On('callback_query:data')
  async onMenuCallbackQuery(ctx: SceneContext<{ menuMsg: MessageX }>) {
    await ctx.answerCallbackQuery();
    await ctx.scene.session.menuMsg.delete();

    switch (ctx.callbackQuery.data) {
      case 'withdrawal':
        return ctx.scene.call(PlayerBankWithdrawalScene.name);
      case 'deposit':
        return ctx.scene.call(PlayerBankDepositScene.name);
      case 'transfer':
        await ctx.reply(
          '–ú—ã –∏—Å–∫—Ä–µ–Ω–Ω–µ —Å–æ–∂–∞–ª–µ–µ–º, –Ω–æ –ø–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.',
        );
        break;
      case 'exit':
        return ctx.scene.exit();
    }

    ctx.scene.resume();
  }

  @Label('MENU_LOOP')
  @Goto('BALANCE')
  menuLoop() {}
}
