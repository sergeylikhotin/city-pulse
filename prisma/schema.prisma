// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

model Player {
  id String @id @default(nanoid(10))

  userId   Int    @unique
  username String

  account    PlayerBankAccount?
  businesses Business[]

  // marketOffers MarketOffer[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
}

model PlayerBankAccount {
  id String @id @default(nanoid(10))

  playerId String @unique
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  balance Decimal @default(0) @db.Money

  outgoingTransactions PlayerBankAccountTransaction[] @relation("OutgoingTransaction")
  incomingTransactions PlayerBankAccountTransaction[] @relation("IncomingTransaction")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model PlayerBankAccountTransaction {
  id String @id @default(nanoid())

  amount Decimal                    @db.Money
  type   BankAccountTransactionType

  fromId String?
  from   PlayerBankAccount? @relation("OutgoingTransaction", fields: [fromId], references: [id], onDelete: NoAction)

  toId String?
  to   PlayerBankAccount? @relation("IncomingTransaction", fields: [toId], references: [id], onDelete: NoAction)

  createdAt DateTime @default(now())
}

model BusinessBankAccount {
  id String @id @default(nanoid(10))

  businessId String   @unique
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  balance Decimal @default(0) @db.Money

  outgoingTransactions BusinessBankAccountTransaction[] @relation("OutgoingTransaction")
  incomingTransactions BusinessBankAccountTransaction[] @relation("IncomingTransaction")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model BusinessBankAccountTransaction {
  id String @id @default(nanoid())

  amount Decimal                    @db.Money
  type   BankAccountTransactionType

  contractId String?

  fromId String?
  from   BusinessBankAccount? @relation("OutgoingTransaction", fields: [fromId], references: [id], onDelete: NoAction)

  toId String?
  to   BusinessBankAccount? @relation("IncomingTransaction", fields: [toId], references: [id], onDelete: NoAction)

  createdAt DateTime @default(now())
}

enum BankAccountTransactionType {
  DEPOSIT // Перевод средств со счёта игрока на счет бизнеса
  WITHDRAWAL // Перевод средств со счёта бизнеса на счет игрока

  TRANSFER // Перевод средств со счёта на счёт одного типа
  PAYMENT // Платеж по контракту
}

model Business {
  id String @id @default(nanoid())

  ownerId String
  owner   Player @relation(fields: [ownerId], references: [id], onDelete: NoAction)

  type String

  account      BusinessBankAccount?
  products     Product[]
  marketOffers MarketOffer[]

  sellerChats ContractChat[] @relation("ContractChatSeller")
  buyerChats  ContractChat[] @relation("ContractChatBuyer")
  closerChat  ContractChat[] @relation("ContractChatCloser")

  chatMessages ContractChatMessage[]

  sellerContracts Contract[] @relation("ContractSeller")
  buyerContracts  Contract[] @relation("ContractBuyer")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Product {
  id String @id @default(nanoid())

  type String

  quantity  Float
  unitPrice Decimal? @db.Money

  quantityPerTimeUnit Float
  timeUnitType        TimeUnitType

  productionType ProductProductionType

  calculatedAt DateTime @default(now())

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  offers MarketOffer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, businessId])
}

enum TimeUnitType {
  HOUR
  TWELVE_HOURS

  DAY
  THREE_DAYS

  WEEK
  TWO_WEEKS

  MONTH
}

enum ProductProductionType {
  CONSUMABLE
  PRODUCIBLE
}

model MarketOffer {
  id String @id @default(nanoid())

  quantity Float

  pricePerUnit Decimal
  offerType    MarketOfferType

  status MarketOfferStatus

  sellerId String
  seller   Business @relation(fields: [sellerId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  contracts      Contract[]
  contractsChats ContractChat[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

enum MarketOfferType {
  ONE_TIME
  PERIODIC
}

enum MarketOfferStatus {
  OPEN
  CLOSED

  HIDDEN
}

model Contract {
  id String @id @default(nanoid())

  termsId String        @unique
  terms   ContractTerms @relation(fields: [termsId], references: [id])

  totalCost      Decimal
  deliveriesLeft Int

  status ContractStatus @default(ACTIVE)

  offerId String
  offer   MarketOffer @relation(fields: [offerId], references: [id])

  sellerId String
  seller   Business @relation(name: "ContractSeller", fields: [sellerId], references: [id])

  buyerId String
  buyer   Business @relation(name: "ContractBuyer", fields: [buyerId], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}

enum ContractStatus {
  ACTIVE
  COMPLETED
  CANCELED
}

model ContractTerms {
  id String @id @default(nanoid())

  quantity     Float
  pricePerUnit Decimal

  deliveryFrequency DeliveryFrequency
  deliveryTimeSlot  String

  deliveriesCount Int

  contract Contract?
  chat     ContractChat?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DeliveryFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

model ContractChat {
  id String @id @default(nanoid())

  status ContractChatStatus @default(OPEN)

  sellerAcceptTerms Boolean @default(false)
  buyerAcceptTerms  Boolean @default(false)

  termsId String?        @unique
  terms   ContractTerms? @relation(fields: [termsId], references: [id])

  offerId String
  offer   MarketOffer @relation(fields: [offerId], references: [id])

  sellerId String
  seller   Business @relation("ContractChatSeller", fields: [sellerId], references: [id])

  buyerId String
  buyer   Business @relation("ContractChatBuyer", fields: [buyerId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  closedAt  DateTime?

  closerId String?
  closer   Business? @relation("ContractChatCloser", fields: [closerId], references: [id])

  messages ContractChatMessage[]
}

enum ContractChatStatus {
  OPEN
  CLOSED
}

model ContractChatMessage {
  id String @id @default(nanoid())

  body String?

  termsUpdated  Boolean @default(false)
  termsAccepted Boolean @default(false)

  timestamp DateTime @default(now())

  chatId String
  chat   ContractChat @relation(fields: [chatId], references: [id])

  senderId String
  sender   Business @relation(fields: [senderId], references: [id])
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
