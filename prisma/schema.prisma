// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

model Player {
  id String @id @default(nanoid(10))

  userId   Int    @unique
  username String

  createdAt DateTime @default(now())
  // updatedAt DateTime @updatedAt

  account    PlayerBankAccount?
  businesses Business[]
}

model PlayerBankAccount {
  id String @id @default(nanoid(10))

  playerId String @unique
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  balance Decimal @default(0) @db.Money

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  outgoingTransactions PlayerBankAccountTransaction[] @relation("OutgoingTransaction")
  incomingTransactions PlayerBankAccountTransaction[] @relation("IncomingTransaction")
}

model PlayerBankAccountTransaction {
  id String @id @default(nanoid())

  amount Decimal                    @db.Money
  type   BankAccountTransactionType

  fromId String?
  from   PlayerBankAccount? @relation("OutgoingTransaction", fields: [fromId], references: [id], onDelete: NoAction)

  toId String?
  to   PlayerBankAccount? @relation("IncomingTransaction", fields: [toId], references: [id], onDelete: NoAction)

  createdAt DateTime @default(now())
}

model BusinessBankAccount {
  id String @id @default(nanoid(10))

  businessId String   @unique
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  balance Decimal @default(0) @db.Money

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  outgoingTransactions BusinessBankAccountTransaction[] @relation("OutgoingTransaction")
  incomingTransactions BusinessBankAccountTransaction[] @relation("IncomingTransaction")
}

model BusinessBankAccountTransaction {
  id String @id @default(nanoid())

  amount Decimal                    @db.Money
  type   BankAccountTransactionType

  contractId String?

  fromId String?
  from   BusinessBankAccount? @relation("OutgoingTransaction", fields: [fromId], references: [id], onDelete: NoAction)

  toId String?
  to   BusinessBankAccount? @relation("IncomingTransaction", fields: [toId], references: [id], onDelete: NoAction)

  createdAt DateTime @default(now())
}

enum BankAccountTransactionType {
  DEPOSIT // Перевод средств со счёта игрока на счет бизнеса
  WITHDRAWAL // Перевод средств со счёта бизнеса на счет игрока

  TRANSFER // Перевод средств со счёта на счёт одного типа
  PAYMENT // Платеж по контракту
}

model Business {
  id String @id @default(nanoid())

  ownerId String
  owner   Player @relation(fields: [ownerId], references: [id], onDelete: NoAction)

  type String

  account  BusinessBankAccount?
  products Product[]
}

model Product {
  id String @id @default(nanoid())

  type String

  quantity  Float
  unitPrice Decimal? @db.Money

  quantityPerTimeUnit Float
  timeUnitType        TimeUnitType

  productionType ProductProductionType

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  calculatedAt DateTime @default(now())

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([id, businessId])
}

enum TimeUnitType {
  HOUR
  TWELVE_HOURS

  DAY
  THREE_DAYS

  WEEK
  TWO_WEEKS

  MONTH
}

enum ProductProductionType {
  CONSUMABLE
  PRODUCIBLE
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
